import os
import json
import requests
from bs4 import BeautifulSoup
import difflib
import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType

# === VK API setup ===
token = os.getenv("TOKEN")
vk_session = vk_api.VkApi(token=token)
longpoll = VkLongPoll(vk_session)
vk = vk_session.get_api()

print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

# === –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫—É—Ä—Å–æ–≤ VK Education ===


# === FAQ —Å –±–∞–∑–æ–≤—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ ===
faq = {
    "–∫–∞–∫ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç": "–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç, –∑–∞–π–¥–∏ –Ω–∞ —Å–∞–π—Ç https://education.vk.company/students#courses –∏ –≤—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π.",
    "–º–æ–∂–Ω–æ –ª–∏ –≤–∑—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç–æ–≤": "–î–∞, —Ç—ã –º–æ–∂–µ—à—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å —Å—Ä–∞–∑—É –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö.",
    "–∫–∞–∫ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ": "–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–∞–π–ª –≤ –∫–æ–Ω—Ü–µ –∑–∞–Ω—è—Ç–∏—è –Ω–∞ —Å–∞–π—Ç–µ VK Education.",
    "–≥–¥–µ –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å–∏ –≤–µ–±–∏–Ω–∞—Ä–æ–≤": "–ó–∞–ø–∏—Å–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –≤ Telegram-–∫–∞–Ω–∞–ª–µ VK Education.",
    "—Å–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è –ø—Ä–æ–µ–∫—Ç": "–û–±—ã—á–Ω–æ –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è—Ç—Å—è –æ—Ç 2 –¥–æ 8 –Ω–µ–¥–µ–ª—å, —Ç–æ—á–Ω—ã–µ —Å—Ä–æ–∫–∏ —É–∫–∞–∑–∞–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.",
    "–ø—Ä–∏–≤–µ—Ç": "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –æ—Ç VK Education –∏ –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ –≤—Å–µ–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ —Ç–≤–æ–∏—Ö —É—á–µ–±–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö!"
}

keyboard = {
    "one_time": False,
    "buttons": [
        [{"action": {"type": "text", "label": "–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç?"}, "color": "primary"}],
        [{"action": {"type": "text", "label": "–ú–æ–∂–Ω–æ –ª–∏ –≤–∑—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç–æ–≤?"}, "color": "primary"}],
        [{"action": {"type": "text", "label": "–ö–∞–∫ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ?"}, "color": "primary"}],
        [{"action": {"type": "text", "label": "–ì–¥–µ –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å–∏ –≤–µ–±–∏–Ω–∞—Ä–æ–≤?"}, "color": "secondary"}],
        [{"action": {"type": "text", "label": "–°–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è –ø—Ä–æ–µ–∫—Ç?"}, "color": "secondary"}],
    ]
}
keyboard_json = json.dumps(keyboard, ensure_ascii=False).encode('utf-8').decode('utf-8')

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è fuzzy matching ===
def get_best_match(user_msg, questions):
    user_msg = user_msg.lower()
    matches = difflib.get_close_matches(user_msg, questions, n=1, cutoff=0.5)
    return matches[0] if matches else None

# === –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ –∫—É—Ä—Å—ã ===

def search_external_sources(query):
    try:
        params = {
            "q": query,
            "format": "json",
            "no_redirect": 1,
            "no_html": 1,
        }
        response = requests.get("https://api.duckduckgo.com/", params=params)
        data = response.json()

        if data.get("AbstractText"):
            return data["AbstractText"]
        
        # –†–∞—Å—à–∏—Ä—è–µ–º RelatedTopics
        related = data.get("RelatedTopics", [])
        texts = []
        for topic in related:
            if isinstance(topic, dict):
                if "Text" in topic:
                    texts.append(topic["Text"])
                elif "Topics" in topic:  # –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Ç–æ–ø–∏–∫–∏
                    for sub in topic["Topics"]:
                        if "Text" in sub:
                            texts.append(sub["Text"])
        
        if texts:
            return "–í–æ—Ç —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏:\n" + "\n".join(f"- {t}" for t in texts[:3])

        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –Ω–∞—à—ë–ª –Ω–∏—á–µ–≥–æ –ø–æ–ª–µ–∑–Ω–æ–≥–æ –≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å."

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ:", e)
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∏—Å—Ç–æ—á–Ω–∏–∫–∞–º."



# === –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –±–æ—Ç–∞ ===
for event in longpoll.listen():
    if event.type == VkEventType.MESSAGE_NEW and event.to_me:
        text = event.text.lower()

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º FAQ —Å fuzzy
        matched_question = get_best_match(text, list(faq.keys()))
        if matched_question:
            answer = faq[matched_question]
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫—É—Ä—Å–∞–º
            answer = answer_about_courses(text, courses_data)

            # –í–æ—Ç –∑–¥–µ—Å—å –±—ã–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø üëá
            if not answer:
                answer = search_external_sources(text)

        vk.messages.send(
            user_id=event.user_id,
            message=answer,
            random_id=0,
            keyboard=keyboard_json
        )
