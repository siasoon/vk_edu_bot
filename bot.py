import os
import json
import requests
from bs4 import BeautifulSoup
import difflib
import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType

# === VK API setup ===
token = os.getenv("TOKEN")
vk_session = vk_api.VkApi(token=token)
longpoll = VkLongPoll(vk_session)
vk = vk_session.get_api()

print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

# === –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫—É—Ä—Å–æ–≤ VK Education ===
def parse_vk_education_courses():
    url = "https://education.vk.company/students#courses"
    try:
        resp = requests.get(url)
        resp.raise_for_status()
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–∞–π—Ç–∞:", e)
        return []

    soup = BeautifulSoup(resp.text, "html.parser")
    
    courses = []

    # –ó–¥–µ—Å—å –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–µ–º—Å—è –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–∞–π—Ç–∞ ‚Äî 
    # –ù—É–∂–Ω–æ –∏–∑—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–ª–æ–∫–æ–≤ —Å –∫—É—Ä—Å–∞–º–∏.
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º —á—Ç–æ –∫—É—Ä—Å—ã –≤ div —Å –∫–ª–∞—Å—Å–æ–º 'course-card' (–ø—Ä–∏–º–µ—Ä)
    
    course_cards = soup.find_all("div", class_="course-card")
    if not course_cards:
        # fallback: –∏—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ h3 –∫–∞–∫ –ø—Ä–∏–º–µ—Ä
        course_cards = soup.find_all("h3")
        for c in course_cards:
            title = c.get_text(strip=True)
            if title:
                courses.append({
                    "title": title,
                    "duration": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    "topics": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    "format": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                })
        return courses

    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∫—É—Ä—Å—ã –ø–æ –∫–ª–∞—Å—Å—É 'course-card'
    for card in course_cards:
        title = card.find("h3")
        duration = card.find(class_="duration")   # –ø—Ä–∏–º–µ—Ä—ã –∫–ª–∞—Å—Å–æ–≤, –Ω–∞–¥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ —Å–∞–π—Ç–µ
        topics = card.find(class_="topics")
        fmt = card.find(class_="format")

        courses.append({
            "title": title.get_text(strip=True) if title else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
            "duration": duration.get_text(strip=True) if duration else "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            "topics": topics.get_text(strip=True) if topics else "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            "format": fmt.get_text(strip=True) if fmt else "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        })

    return courses

# –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
courses_data = parse_vk_education_courses()

# === FAQ —Å –±–∞–∑–æ–≤—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ ===
faq = {
    "–∫–∞–∫ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç": "–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç, –∑–∞–π–¥–∏ –Ω–∞ —Å–∞–π—Ç https://education.vk.company/students#courses –∏ –≤—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π.",
    "–º–æ–∂–Ω–æ –ª–∏ –≤–∑—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç–æ–≤": "–î–∞, —Ç—ã –º–æ–∂–µ—à—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å —Å—Ä–∞–∑—É –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö.",
    "–∫–∞–∫ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ": "–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–∞–π–ª –≤ –∫–æ–Ω—Ü–µ –∑–∞–Ω—è—Ç–∏—è –Ω–∞ —Å–∞–π—Ç–µ VK Education.",
    "–≥–¥–µ –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å–∏ –≤–µ–±–∏–Ω–∞—Ä–æ–≤": "–ó–∞–ø–∏—Å–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –≤ Telegram-–∫–∞–Ω–∞–ª–µ VK Education.",
    "—Å–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è –ø—Ä–æ–µ–∫—Ç": "–û–±—ã—á–Ω–æ –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è—Ç—Å—è –æ—Ç 2 –¥–æ 8 –Ω–µ–¥–µ–ª—å, —Ç–æ—á–Ω—ã–µ —Å—Ä–æ–∫–∏ —É–∫–∞–∑–∞–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.",
    "–ø—Ä–∏–≤–µ—Ç": "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –æ—Ç VK Education –∏ –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ –≤—Å–µ–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ —Ç–≤–æ–∏—Ö —É—á–µ–±–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö!"
}

keyboard = {
    "one_time": False,
    "buttons": [
        [{"action": {"type": "text", "label": "–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç?"}, "color": "primary"}],
        [{"action": {"type": "text", "label": "–ú–æ–∂–Ω–æ –ª–∏ –≤–∑—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç–æ–≤?"}, "color": "primary"}],
        [{"action": {"type": "text", "label": "–ö–∞–∫ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ?"}, "color": "primary"}],
        [{"action": {"type": "text", "label": "–ì–¥–µ –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å–∏ –≤–µ–±–∏–Ω–∞—Ä–æ–≤?"}, "color": "secondary"}],
        [{"action": {"type": "text", "label": "–°–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è –ø—Ä–æ–µ–∫—Ç?"}, "color": "secondary"}],
    ]
}
keyboard_json = json.dumps(keyboard, ensure_ascii=False).encode('utf-8').decode('utf-8')

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è fuzzy matching ===
def get_best_match(user_msg, questions):
    user_msg = user_msg.lower()
    matches = difflib.get_close_matches(user_msg, questions, n=1, cutoff=0.5)
    return matches[0] if matches else None

# === –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ –∫—É—Ä—Å—ã ===
def answer_about_courses(msg, courses):
    msg = msg.lower()

    # –ü—Ä–∏–º–µ—Ä—ã –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∫—É—Ä—Å–∞–º
    if any(word in msg for word in ["—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥", "frontend", "–≤–µ—Ä—Å—Ç–∫–∞"]):
        # –ò—â–µ–º –∫—É—Ä—Å—ã —Å —Ç–µ–º–æ–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
        matched = [c for c in courses if "—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥" in c["topics"].lower() or "frontend" in c["topics"].lower()]
        if matched:
            response = "–í–æ—Ç –∫—É—Ä—Å—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç—Å—è —Ç–µ–º–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:\n"
            for c in matched:
                response += f"- {c['title']} (–°—Ä–æ–∫–∏: {c['duration']}, –§–æ—Ä–º–∞—Ç: {c['format']})\n"
            return response
        else:
            return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫—É—Ä—Å—ã —Å —Ç–µ–º–æ–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

    # –ü—Ä–∏–º–µ—Ä: –∑–∞–ø—Ä–æ—Å –æ —Å—Ä–æ–∫–∞—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    if "—Å—Ä–æ–∫" in msg or "–¥–ª–∏—Ç—Å—è" in msg:
        # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        for course in courses:
            if course["title"].lower() in msg:
                return f"–ü—Ä–æ–µ–∫—Ç ¬´{course['title']}¬ª –¥–ª–∏—Ç—Å—è: {course['duration']}."

    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –ø—Ä–∞–≤–∏–ª –∏ –ø—Ä–æ–≤–µ—Ä–æ–∫

    return None

# === –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –±–æ—Ç–∞ ===
for event in longpoll.listen():
    if event.type == VkEventType.MESSAGE_NEW and event.to_me:
        text = event.text.lower()

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º FAQ —Å fuzzy
        matched_question = get_best_match(text, list(faq.keys()))
        if matched_question:
            answer = faq[matched_question]
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫—É—Ä—Å–∞–º
            answer = answer_about_courses(text, courses_data)

        if not answer:
            answer = "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –≤–æ–ø—Ä–æ—Å –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ üëá"

        vk.messages.send(
            user_id=event.user_id,
            message=answer,
            random_id=0,
            keyboard=keyboard_json
        )
